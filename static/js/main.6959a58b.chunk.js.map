{"version":3,"sources":["dataFetcher.js","Table/expandableTable.js","Table/index.js","App.js","serviceWorker.js","index.js"],"names":["dataFetchReducer","state","action","type","isLoading","isError","data","payload","Error","App","useState","query","setQuery","initialUrl","initialData","url","setUrl","useReducer","dispatch","useEffect","a","axios","result","fetchData","doFetch","useDataApi","items","onSubmit","event","preventDefault","value","onChange","target","map","item","key","id","href","selfLink","rel","volumeInfo","title","tempData","status","tasks","date","name1","name2","percent","renderGridSubColumns","index","taskName","Grid","columns","Column","Table","expandedRows","setExpanded","allItemRows","setData","forEach","perItemRows","renderItem","concat","rowId","itemRows","Row","onClick","currentExpandedRows","newExpandedRows","includes","filter","handleRowClick","Cell","Icon","name","push","colSpan","Segment","basic","renderItemDetails","selectable","Header","HeaderCell","Body","className","exact","path","render","to","Fragment","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6959a58b.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\n\nconst dataFetchReducer = (state, action) => {\n  switch (action.type) {\n    case \"FETCH_INIT\":\n      return {\n        ...state,\n        isLoading: true,\n        isError: false\n      };\n    case \"FETCH_SUCCESS\":\n      return {\n        ...state,\n        isLoading: false,\n        isError: false,\n        data: action.payload\n      };\n    case \"FETCH_FAILURE\":\n      return {\n        ...state,\n        isLoading: false,\n        isError: true\n      };\n    default:\n      throw new Error();\n  }\n};\n\nconst useDataApi = (initialUrl, initialData) => {\n  const [url, setUrl] = useState(initialUrl);\n\n  const [state, dispatch] = useReducer(dataFetchReducer, {\n    isLoading: false,\n    isError: false,\n    data: initialData\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch({ type: \"FETCH_INIT\" });\n      try {\n        const result = await axios(url);\n        dispatch({ type: \"FETCH_SUCCESS\", payload: result.data });\n      } catch (error) {\n        dispatch({ type: \"FETCH_FAILURE\" });\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  const doFetch = url => {\n    setUrl(url);\n  };\n\n  return { ...state, doFetch };\n};\n\nfunction App() {\n  const [query, setQuery] = useState(\"isbn:0747532699\");\n  const { data, isLoading, isError, doFetch } = useDataApi(\n    `https://www.googleapis.com/books/v1/volumes?q=${query}`,\n    { items: [] }\n  );\n\n  return (\n    <Fragment>\n      <form\n        onSubmit={event => {\n          doFetch(`https://www.googleapis.com/books/v1/volumes?q=${query}`);\n\n          event.preventDefault();\n        }}\n      >\n        <input\n          type=\"text\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {isError && <div>Something went wrong ...</div>}\n\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <ul>\n          {data.items.map(item => (\n            <li key={item.id}>\n              <a href={item.selfLink} target=\"_blank\" rel=\"noopener noreferrer\">{item.volumeInfo.title}</a>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React, { useState, useEffect } from \"react\";\nimport { Table, Icon, Segment, Grid } from \"semantic-ui-react\";\nimport \"./styles.css\"\n\nconst tempData = [\n  {\n    type: \"Onboard Contractor\",\n    status: \"Pending\",\n    tasks: \"2 of 4\",\n    date: \"2014-04-18\",\n    name1: \"Create Zendesk Ticket\",\n    name2: \"LDAP Access\",\n    percent: 50\n  },\n  {\n    type: \"Onboard Employee\",\n    status: \"Done\",\n    tasks: \"1 of 3\",\n    date: \"2014-04-21\",\n    name1: \"Equipment Setup\",\n    name2: \"Microsoft Training\",\n    percent: 100\n  },\n  {\n    type: \"Onboard Contractor\",\n    status: \"Error\",\n    tasks: \"3 of 3\",\n    date: \"2014-08-09\",\n    name1: \"Create Zendesk Ticket\",\n    name2: \"LDAP Access\",\n    percent: 25\n  },\n  {\n    type: \"Terminate Contractor\",\n    status: \"Done\",\n    tasks: \"2 of 4\",\n    date: \"2014-04-24\",\n    name1: \"Create Zendesk Ticket\",\n    name2: \"LDAP Access\",\n    percent: 100\n  },\n  {\n    type: \"Terminate Contractor\",\n    status: \"Pending\",\n    tasks: \"1 of 4\",\n    date: \"2014-04-26\",\n    name1: \"Create Zendesk Ticket\",\n    name2: \"LDAP Access\",\n    percent: 90\n  }\n]\n\nconst renderGridSubColumns = (item, index) => {\n  let taskName = item.name1\n  if (index > 1) taskName = item.name2\n  return (\n    <Grid columns={4}>\n      <Grid.Column>\n        <span>{index}: {taskName}</span>\n      </Grid.Column>\n      <Grid.Column>\n        <span>Status: {item.status}</span>\n      </Grid.Column>\n      <Grid.Column>\n        <span>Percent Complete: {item.percent}</span>\n      </Grid.Column>\n      <Grid.Column>\n        <span>\n          <button>Update</button>\n        </span>\n      </Grid.Column>\n    </Grid>\n  )\n}\n\nconst ExapndableTable = () => {\n  const [expandedRows, setExpanded] = useState([])\n  const [allItemRows, setData] = useState([])\n\n  useEffect(() => {\n    let allItemRows = [];\n    tempData.forEach((item, index) => {\n      const perItemRows = renderItem(item, index);\n      allItemRows = allItemRows.concat(perItemRows);\n    });\n    setData(allItemRows)\n  }, [expandedRows])\n\n  const handleRowClick = (rowId) => {\n    const currentExpandedRows = expandedRows;\n    const isRowCurrentlyExpanded = currentExpandedRows.includes(rowId);\n\n    const newExpandedRows = isRowCurrentlyExpanded\n      ? currentExpandedRows.filter(id => id !== rowId)\n      : currentExpandedRows.concat(rowId);\n\n    setExpanded(newExpandedRows);\n  }\n\n  const renderItemCaret = (rowId) => {\n    const currentExpandedRows = expandedRows\n    const isRowCurrentlyExpanded = currentExpandedRows.includes(rowId);\n\n    if (isRowCurrentlyExpanded) {\n      return <Icon name=\"caret down\" />;\n    } else {\n      return <Icon name=\"caret right\" />;\n    }\n  }\n\n  const renderItemDetails = (item) => (\n    <Segment basic>\n      <h2>2 Active Tasks</h2>\n      {renderGridSubColumns(item, 1)}\n      {renderGridSubColumns(item, 2)}    \n    </Segment>\n  )\n\n  const renderItem = (item, index) => {\n    const itemRows = [\n      <Table.Row onClick={() => handleRowClick(index)} key={\"row-data-\" + index}>\n        <Table.Cell>{renderItemCaret(index)}</Table.Cell>\n        <Table.Cell>{item.type}</Table.Cell>\n        <Table.Cell>{item.status}</Table.Cell>\n        <Table.Cell>{item.date}</Table.Cell>\n        <Table.Cell>{item.tasks}</Table.Cell>\n      </Table.Row>\n    ];\n\n    if (expandedRows.includes(index)) {\n      itemRows.push(\n        <Table.Row key={\"row-expanded-\" + index}>\n          <Table.Cell colSpan=\"5\">{renderItemDetails(item)}</Table.Cell>\n        </Table.Row>\n      );\n    }\n\n    return itemRows;\n  }\n\n  return (\n    <Table selectable>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell />\n          <Table.HeaderCell>Activity Type</Table.HeaderCell>\n          <Table.HeaderCell>Overall Status</Table.HeaderCell>\n          <Table.HeaderCell>Date Created</Table.HeaderCell>\n          <Table.HeaderCell>Tasks Completed</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n\n      <Table.Body>{allItemRows}</Table.Body>\n    </Table>\n  );\n}\n\nexport default ExapndableTable;\n","import Table from \"./expandableTable\"\n\nexport default Table","import React from 'react';\nimport Fetcher from './dataFetcher'\nimport Table from './Table'\nimport { BrowserRouter as Router, Link, Route } from 'react-router-dom'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Router>\n          <Route exact={true} path=\"/\" render={() => (\n            <div className=\"AppLinks\">\n              <span className=\"linkSpan\">\n                <Link to={'/books'}>Book Fetcher App</Link>\n              </span>\n              <span className=\"linkSpan\">\n                <Link to={'/table'}>Expandable Table</Link>\n              </span>\n              <span className=\"linkSpan\">\n                <Link to={'https://reactjs.org'} target=\"_blank\">React Docs</Link>\n              </span>\n            </div>\n          )} />\n          <Route path=\"/books\" render={() => (\n              <React.Fragment>\n                <Link to={'/'}>\n                  Home\n                </Link>\n                <Fetcher />\n              </React.Fragment>\n          )} />\n          <Route path=\"/table\" render={() => (\n              <React.Fragment>\n                <div className=\"homeNav\">\n                  <Link to={'/'}>\n                    Home\n                  </Link>\n                </div>\n                <Table />\n              </React.Fragment>\n          )} />\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}